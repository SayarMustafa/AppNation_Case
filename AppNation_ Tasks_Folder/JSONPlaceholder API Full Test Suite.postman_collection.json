{
	"info": {
		"_postman_id": "a54e84e9-103d-451b-a5ba-f33af9f41660",
		"name": "JSONPlaceholder API Full Test Suite",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "32923067"
	},
	"item": [
		{
			"name": "GET /posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"",
							"pm.test(\"Schema is valid\", function () {",
							"  var schema = {",
							"    type: \"array\",",
							"    items: {",
							"      type: \"object\",",
							"      properties: {",
							"        userId: { type: \"number\" },",
							"        id: { type: \"number\" },",
							"        title: { type: \"string\" },",
							"        body: { type: \"string\" }",
							"      },",
							"      required: [\"userId\", \"id\", \"title\", \"body\"]",
							"    }",
							"  };",
							"",
							"  pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"});",
							"// Test for response status",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// Test for Content-Type header",
							"pm.test(\"Content-Type is present and has a specific value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Post list is not empty\", function () {",
							"    pm.expect(jsonData.length).to.be.above(0, \"Post list is empty\");",
							"});",
							"",
							"pm.test(\"Each post has required fields\", function () {",
							"    jsonData.forEach((post) => {",
							"        pm.expect(post).to.have.property('id');",
							"        pm.expect(post).to.have.property('userId');",
							"        pm.expect(post).to.have.property('title');",
							"        pm.expect(post).to.have.property('body');",
							"    });",
							"});",
							"",
							"pm.test(\"Validate id and title for specific post (id: 1)\", function () {",
							"   ",
							"    let specificPost = jsonData.find(post => post.id === 1);",
							"    pm.expect(specificPost.title).to.eql('sunt aut facere repellat provident occaecati excepturi optio reprehenderit');",
							"    pm.expect(specificPost.body).to.eql('quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto');",
							"});",
							"pm.test(\"Post list contains exactly 100 items\", function () {",
							"    pm.expect(jsonData.length).to.eql(100, \"Post list does not contain exactly 100 items\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{base_url}}/posts"
			},
			"response": []
		},
		{
			"name": "GET /comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"pm.test(\"Response has the correct schema\", function () {",
							"    const schema = {",
							"        \"type\": \"array\",",
							"        \"items\": {",
							"            \"type\": \"object\",",
							"            \"properties\": {",
							"                \"postId\": { \"type\": \"number\" },",
							"                \"id\": { \"type\": \"number\" },",
							"                \"name\": { \"type\": \"string\" },",
							"                \"email\": { \"type\": \"string\", \"format\": \"email\" },",
							"                \"body\": { \"type\": \"string\" }",
							"            },",
							"            \"required\": [\"postId\", \"id\", \"name\", \"email\", \"body\"]",
							"        }",
							"    };",
							"    pm.response.to.have.jsonSchema(schema);",
							"});",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Content-Type is present and has a specific value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");",
							"});",
							"pm.test(\"Comment list is not empty\", function () {",
							"    pm.expect(jsonData.length).to.be.above(0, \"Comment list is empty\");",
							"});",
							"",
							"pm.test(\"Each comment has required fields\", function () {",
							"    jsonData.forEach((comment) => {",
							"        pm.expect(comment).to.have.property('id');",
							"        pm.expect(comment).to.have.property('postId');",
							"        pm.expect(comment).to.have.property('email');",
							"        pm.expect(comment).to.have.property('body');",
							"        pm.expect(comment).to.have.property('name');",
							"    });",
							"});",
							"pm.test(\"Validate id,email,body and name for specific comment (id: 1)\", function () {",
							"   ",
							"    let specificComment = jsonData.find(comment => comment.id === 1);",
							"    pm.expect(specificComment.email).to.eql('Eliseo@gardner.biz');",
							"    pm.expect(specificComment.body).to.eql('laudantium enim quasi est quidem magnam voluptate ipsam eos\\ntempora quo necessitatibus\\ndolor quam autem quasi\\nreiciendis et nam sapiente accusantium');",
							"    pm.expect(specificComment.name).to.eql('id labore ex et quam laborum')",
							"});",
							"pm.test(\"Comment list contains exactly 500 items\", function () {",
							"    pm.expect(jsonData.length).to.eql(500, \"Comment list does not contain exactly 500 items\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{base_url}}/comments"
			},
			"response": []
		},
		{
			"name": "GET /albums",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"pm.test('Response has the expected schema', function () {",
							"    const schema = {",
							"        \"type\": \"array\",",
							"        \"items\": {",
							"            \"type\": \"object\",",
							"            \"properties\": {",
							"                \"userId\": { \"type\": \"number\" },",
							"                \"id\": { \"type\": \"number\" },",
							"                \"title\": { \"type\": \"string\" }",
							"            },",
							"            \"required\": [\"userId\", \"id\", \"title\"]",
							"        }",
							"    };",
							"    pm.response.to.have.jsonSchema(schema);",
							"});",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Content-Type is present and has a specific value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");",
							"});",
							"pm.test(\"Album list is not empty\", function () {",
							"    pm.expect(jsonData.length).to.be.above(0, \"Album list is empty\");",
							"});",
							"pm.test(\"Each album has required fields\", function () {",
							"    jsonData.forEach((album) => {",
							"        pm.expect(album).to.have.property('userId');",
							"        pm.expect(album).to.have.property('id');",
							"        pm.expect(album).to.have.property('title');",
							"        ",
							"    });",
							"});",
							"pm.test(\"Validate userId,id and title for specific album (id: 1)\", function () {",
							"   ",
							"    let specificAlbum = jsonData.find(album => album.id === 1);",
							"    pm.expect(specificAlbum.title).to.eql('quidem molestiae enim');",
							"    pm.expect(specificAlbum.userId).to.eql(1);",
							"});",
							"pm.test(\"Album list contains exactly 100 items\", function () {",
							"    pm.expect(jsonData.length).to.eql(100, \"Album list does not contain exactly 100 items\");",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{base_url}}/albums"
			},
			"response": []
		},
		{
			"name": "GET /photos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"// Test for response schema",
							"pm.test(\"Response should have the correct schema\", function () {",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData[0]).to.have.property('albumId');",
							"    pm.expect(jsonData[0]).to.have.property('id');",
							"    pm.expect(jsonData[0]).to.have.property('title');",
							"    pm.expect(jsonData[0]).to.have.property('url');",
							"    pm.expect(jsonData[0]).to.have.property('thumbnailUrl');",
							"});",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Content-Type is present and has a specific value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");",
							"});",
							"pm.test(\"Photos list is not empty\", function () {",
							"    pm.expect(jsonData.length).to.be.above(0, \"Photos list is empty\");",
							"});",
							"pm.test(\"Each album has required fields\", function () {",
							"    jsonData.forEach((photos) => {",
							"        pm.expect(photos).to.have.property('albumId');",
							"        pm.expect(photos).to.have.property('id');",
							"        pm.expect(photos).to.have.property('title');",
							"        pm.expect(photos).to.have.property('url');",
							"        pm.expect(photos).to.have.property('thumbnailUrl');",
							"        ",
							"    });",
							"});",
							"pm.test(\"Validate albumId,id,title,url and thumbnailUrl for specific Photos List (id: 1)\", function () {",
							"   ",
							"    let specificPhotos = jsonData.find(photos => photos.id === 1);",
							"    pm.expect(specificPhotos.title).to.eql('accusamus beatae ad facilis cum similique qui sunt');",
							"    pm.expect(specificPhotos.albumId).to.eql(1);",
							"    pm.expect(specificPhotos.url).to.eql('https://via.placeholder.com/600/92c952');",
							"    pm.expect(specificPhotos.thumbnailUrl).to.eql('https://via.placeholder.com/150/92c952');",
							"});",
							"pm.test(\"Photos list contains exactly 5000 items\", function () {",
							"    pm.expect(jsonData.length).to.eql(5000, \"Photos list does not contain exactly 100 items\");",
							"});",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{base_url}}/photos"
			},
			"response": []
		},
		{
			"name": "GET /comments?postId={post_id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"",
							"pm.test('Response should have the correct schema', function () {",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData).to.have.lengthOf.at.least(1);",
							"    pm.expect(jsonData[0]).to.have.property('postId');",
							"    pm.expect(jsonData[0].postId).to.be.a('number');",
							"    pm.expect(jsonData[0]).to.have.property('id');",
							"    pm.expect(jsonData[0].id).to.be.a('number');",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0].name).to.be.a('string');",
							"    pm.expect(jsonData[0]).to.have.property('email');",
							"    pm.expect(jsonData[0].email).to.be.a('string');",
							"    pm.expect(jsonData[0]).to.have.property('body');",
							"    pm.expect(jsonData[0].body).to.be.a('string');",
							"});",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Content-Type is present and has a specific value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Comment Post list is not empty\", function () {",
							"    pm.expect(jsonData.length).to.be.above(0, \"Comment Post list is empty\");",
							"});",
							"",
							"pm.test(\"Each post has required fields\", function () {",
							"    jsonData.forEach((post) => { // Changed 'album' to 'post'",
							"        pm.expect(post).to.have.property('postId');",
							"        pm.expect(post).to.have.property('id');",
							"        pm.expect(post).to.have.property('name');",
							"        pm.expect(post).to.have.property('email');",
							"        pm.expect(post).to.have.property('body');",
							"        ",
							"    });",
							"});",
							"",
							"pm.test(\"Validate postId,id,name,email and body for specific Comment Post (id: 1)\", function () {",
							"    let specificPost = jsonData.find(specificPost => specificPost.id === 1);",
							"    pm.expect(specificPost.id).to.eql(1);",
							"    pm.expect(specificPost.name).to.eql('id labore ex et quam laborum');",
							"    pm.expect(specificPost.email).to.eql('Eliseo@gardner.biz');",
							"    pm.expect(specificPost.body).to.eql('laudantium enim quasi est quidem magnam voluptate ipsam eos\\ntempora quo necessitatibus\\ndolor quam autem quasi\\nreiciendis et nam sapiente accusantium');",
							"});",
							"",
							"pm.test(\"Comment Post list contains exactly 5 items\", function () {",
							"    pm.expect(jsonData.length).to.eql(5, \"Album list does not contain exactly 100 items\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}/comments?postId={{post_id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"comments"
					],
					"query": [
						{
							"key": "postId",
							"value": "{{post_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"pm.test('Response has the expected schema', function () {",
							"    const schema = {",
							"        \"type\": \"array\",",
							"        \"items\": {",
							"            \"type\": \"object\",",
							"            \"properties\": {",
							"                \"userId\": { \"type\": \"number\" },",
							"                \"id\": { \"type\": \"number\" },",
							"                \"title\": { \"type\": \"string\" }",
							"            },",
							"            \"required\": [\"userId\", \"id\", \"title\"]",
							"        }",
							"    };",
							"    pm.response.to.have.jsonSchema(schema);",
							"});",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Content-Type is present and has a specific value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");",
							"});",
							"pm.test(\"ToDos list is not empty\", function () {",
							"    pm.expect(jsonData.length).to.be.above(0, \"ToDos list is empty\");",
							"});",
							"pm.test(\"Each ToDoS has required fields\", function () {",
							"    jsonData.forEach((toDos) => {",
							"        pm.expect(toDos).to.have.property('userId');",
							"        pm.expect(toDos).to.have.property('id');",
							"        pm.expect(toDos).to.have.property('title');",
							"        pm.expect(toDos).to.have.property('completed');",
							"        ",
							"    });",
							"});",
							"pm.test(\"Validate userId,id,title and completed for specific toDos (id: 1)\", function () {",
							"   ",
							"    let specificToDos = jsonData.find(toDos => toDos.id === 1);",
							"    pm.expect(specificToDos.title).to.eql('delectus aut autem');",
							"    pm.expect(specificToDos.userId).to.eql(1);",
							"    pm.expect(specificToDos.completed).to.eql(false);",
							"});",
							"pm.test(\"ToDos list contains exactly 200 items\", function () {",
							"    pm.expect(jsonData.length).to.eql(200, \"Album list does not contain exactly 100 items\");",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{base_url}}/todos"
			},
			"response": []
		},
		{
			"name": "GET /users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"pm.test('Response has the correct schema', function () {",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData.length).to.be.above(0, \"User list is empty\");",
							"",
							"    let firstUser = jsonData[0];",
							"    ",
							"    pm.expect(firstUser).to.have.property('id');",
							"    pm.expect(firstUser).to.have.property('name');",
							"    pm.expect(firstUser).to.have.property('username');",
							"    pm.expect(firstUser).to.have.property('email');",
							"    pm.expect(firstUser).to.have.property('address');",
							"    pm.expect(firstUser).to.have.property('phone');",
							"    pm.expect(firstUser).to.have.property('website');",
							"    pm.expect(firstUser).to.have.property('company');",
							"});",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Content-Type is present and has a specific value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");",
							"});",
							"pm.test(\"Users list is not empty\", function () {",
							"    pm.expect(jsonData.length).to.be.above(0, \"Users list is empty\");",
							"});",
							"pm.test(\"Each user has required fields\", function () {",
							"    jsonData.forEach((user) => {",
							"        pm.expect(user).to.have.property('id');",
							"        pm.expect(user).to.have.property('name');",
							"        pm.expect(user).to.have.property('username');",
							"        pm.expect(user).to.have.property('email');",
							"        pm.expect(user).to.have.property('address');",
							"",
							"        pm.expect(user.address).to.have.property('street');",
							"        pm.expect(user.address).to.have.property('suite');",
							"        pm.expect(user.address).to.have.property('city');",
							"        pm.expect(user.address).to.have.property('zipcode');",
							"        pm.expect(user.address).to.have.property('geo');",
							"",
							"        ",
							"    });",
							"});",
							"pm.test(\"Validate id, name, username, email and address for specific user (id: 1)\", function () {",
							"    let specificUser = jsonData.find(user => user.id === 1); ",
							"",
							"    pm.expect(specificUser).to.have.property('id', 1);",
							"    pm.expect(specificUser).to.have.property('name', 'Leanne Graham');",
							"    pm.expect(specificUser).to.have.property('username', 'Bret');",
							"    pm.expect(specificUser).to.have.property('email', 'Sincere@april.biz');",
							"",
							"    pm.expect(specificUser).to.have.property('address');",
							"    pm.expect(specificUser.address).to.have.property('street', 'Kulas Light');",
							"    pm.expect(specificUser.address).to.have.property('suite', 'Apt. 556');",
							"    pm.expect(specificUser.address).to.have.property('city', 'Gwenborough');",
							"    pm.expect(specificUser.address).to.have.property('zipcode', '92998-3874');",
							"",
							"    pm.expect(specificUser.address).to.have.property('geo');",
							"    pm.expect(specificUser.address.geo).to.have.property('lat', '-37.3159');",
							"    pm.expect(specificUser.address.geo).to.have.property('lng', '81.1496');",
							"});",
							"",
							"pm.test(\"Users list contains exactly 10 items\", function () {",
							"    pm.expect(jsonData.length).to.eql(10, \"Album list does not contain exactly 100 items\");",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{base_url}}/users"
			},
			"response": []
		},
		{
			"name": "GET /posts/{post_id}/comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"pm.test(\"Response has the correct schema\", function () {",
							"    pm.expect(jsonData).to.be.an('array');",
							"    pm.expect(jsonData[0]).to.have.property('postId');",
							"    pm.expect(jsonData[0]).to.have.property('id');",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0]).to.have.property('email');",
							"    pm.expect(jsonData[0]).to.have.property('body');",
							"});",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Content-Type is present and has a specific value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");",
							"});",
							"pm.test(\"Post list is not empty\", function () {",
							"    pm.expect(jsonData.length).to.be.above(0, \"Post list is empty\");",
							"});",
							"pm.test(\"Each Post has required fields\", function () {",
							"    jsonData.forEach((post) => {",
							"        pm.expect(post).to.have.property('postId');",
							"        pm.expect(post).to.have.property('id');",
							"        pm.expect(post).to.have.property('name');",
							"        pm.expect(post).to.have.property('email');",
							"        pm.expect(post).to.have.property('body');",
							"        ",
							"    });",
							"});",
							"pm.test(\"Validate postId,id,name,email and body for specific post (id: 1)\", function () {",
							"   ",
							"    let specificPost = jsonData.find(post => post.id === 1);",
							"    pm.expect(specificPost.name).to.eql('id labore ex et quam laborum');",
							"    pm.expect(specificPost.email).to.eql('Eliseo@gardner.biz');",
							"    pm.expect(specificPost.id).to.eql(1);",
							"    pm.expect(specificPost.body).to.eql('laudantium enim quasi est quidem magnam voluptate ipsam eos\\ntempora quo necessitatibus\\ndolor quam autem quasi\\nreiciendis et nam sapiente accusantium');",
							"});",
							"pm.test(\"Post list contains exactly 5 items\", function () {",
							"    pm.expect(jsonData.length).to.eql(5, \"Album list does not contain exactly 100 items\");",
							"});",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{base_url}}/posts/{{post_id}}/comments"
			},
			"response": []
		},
		{
			"name": "GET /posts/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"",
							"pm.test(\"Response should match the schema\", function () {",
							"    pm.response.to.have.jsonSchema({",
							"        type: \"object\",",
							"        required: [\"userId\", \"id\", \"title\", \"body\"],",
							"        properties: {",
							"            userId: { type: \"number\" },",
							"            id: { type: \"number\" },",
							"            title: { type: \"string\" },",
							"            body: { type: \"string\" }",
							"        }",
							"    });",
							"});",
							"",
							"// Test for response status",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// Test for Content-Type header",
							"pm.test(\"Content-Type is present and has a specific value\", function () {",
							"    pm.response.to.have.header(\"Content-Type\");",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");",
							"});",
							"",
							"pm.test(\"Post response is not empty\", function () {",
							"    pm.expect(jsonData).to.be.an('object'); ",
							"    pm.expect(jsonData).to.have.all.keys('userId', 'id', 'title', 'body');",
							"});",
							"",
							"pm.test(\"Each post has required fields\", function () {",
							"    pm.expect(jsonData).to.be.an('object').that.has.property('id');",
							"    pm.expect(jsonData).to.be.an('object').that.has.property('userId');",
							"    pm.expect(jsonData).to.be.an('object').that.has.property('title');",
							"    pm.expect(jsonData).to.be.an('object').that.has.property('body');",
							"});",
							"",
							"pm.test(\"Validate id and title for a specific post(id=1)\", function () {",
							"",
							"    pm.expect(jsonData).to.not.be.undefined; ",
							"    pm.expect(jsonData.title).to.eql('sunt aut facere repellat provident occaecati excepturi optio reprehenderit'); ",
							"    pm.expect(jsonData.body).to.eql('quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto');",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{base_url}}/posts/{{post_id}}"
			},
			"response": []
		},
		{
			"name": "Get Posts 404 Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has a valid schema\", function () {\r",
							"    pm.response.to.have.jsonSchema({\r",
							"        type: \"object\",\r",
							"        additionalProperties: false // response has no additional properties\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present and has the correct value\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");\r",
							"}); \r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"pm.test(\"Response body should be an empty JSON object\", function () {\r",
							"    pm.expect(pm.response.json()).to.eql({});\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{base_url}}/posts/9999"
			},
			"response": []
		},
		{
			"name": "POST /posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"// Test for response schema\r",
							"pm.test(\"Response should have the correct schema\", function () {\r",
							"    pm.response.to.have.jsonSchema({\r",
							"        type: \"object\",\r",
							"        required: [\"title\", \"body\", \"userId\", \"id\"],\r",
							"        properties: {\r",
							"            title: { type: \"string\" },\r",
							"            body: { type: \"string\" },\r",
							"            userId: { type: \"number\" },\r",
							"            id: { type: \"number\" }\r",
							"        }\r",
							"    });\r",
							"});\r",
							"\r",
							"// Test for response status\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"// Test for Content-Type header\r",
							"pm.test(\"Content-Type is present and has a specific value\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Post response is not empty\", function () {\r",
							"    pm.expect(jsonData).to.be.an('object'); \r",
							"    pm.expect(jsonData).to.have.all.keys('userId', 'id', 'title', 'body');\r",
							"});\r",
							"\r",
							"pm.test(\"Each post has required fields\", function () {\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('userId');\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"    pm.expect(jsonData).to.have.property('body');\r",
							"});\r",
							"\r",
							"pm.test(\"Validate id, title, and body for added post\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(101);\r",
							"    pm.expect(jsonData.title).to.eql(\"foo\");\r",
							"    pm.expect(jsonData.body).to.eql(\"bar\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"title\": \"foo\",\n  \"body\": \"bar\",\n  \"userId\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/posts"
			},
			"response": []
		},
		{
			"name": "PUT /posts/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"\r",
							"// Test for response schema\r",
							"pm.test(\"Response should match the schema\", function () {\r",
							"    const schema = {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"            \"id\": { \"type\": \"number\" },\r",
							"            \"title\": { \"type\": \"string\" },\r",
							"            \"body\": { \"type\": \"string\" },\r",
							"            \"userId\": { \"type\": \"number\" }\r",
							"        },\r",
							"        \"required\": [\"id\", \"title\", \"body\", \"userId\"]\r",
							"    };\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"// Test for response status\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Test for Content-Type header\r",
							"pm.test(\"Content-Type is present and has a specific value\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Updated post response is not empty\", function () {\r",
							"    pm.expect(jsonData).to.be.an('object'); \r",
							"    pm.expect(jsonData).to.have.all.keys('userId', 'id', 'title', 'body');\r",
							"});\r",
							"\r",
							"pm.test(\"Each post has required fields\", function () {\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('userId');\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"    pm.expect(jsonData).to.have.property('body');\r",
							"});\r",
							"\r",
							"pm.test(\"Validate id, title, and body for updated post\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get('post_id'), 10));\r",
							"    pm.expect(jsonData.title).to.eql(\"updated title\");\r",
							"    pm.expect(jsonData.body).to.eql(\"updated body\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"id\": 1,\n  \"title\": \"updated title\",\n  \"body\": \"updated body\",\n  \"userId\": 1\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/posts/{{post_id}}"
			},
			"response": []
		},
		{
			"name": "PATCH /posts/{id}-title",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"// Test for response schema\r",
							"pm.test(\"Response should match schema\", function () {\r",
							"    pm.response.to.have.jsonSchema({\r",
							"        type: \"object\",\r",
							"        properties: {\r",
							"            userId: { type: \"number\" },\r",
							"            id: { type: \"number\" },\r",
							"            title: { type: \"string\" },\r",
							"            body: { type: \"string\" }\r",
							"        },\r",
							"        required: [\"userId\", \"id\", \"title\", \"body\"]\r",
							"    });\r",
							"});\r",
							"// Test for response status\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Test for Content-Type header\r",
							"pm.test(\"Content-Type is present and has a specific value\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Patched post response is not empty\", function () {\r",
							"    pm.expect(jsonData).to.be.an('object'); \r",
							"    pm.expect(jsonData).to.have.all.keys('userId', 'id', 'title', 'body');\r",
							"});\r",
							"\r",
							"pm.test(\"Post has required fields\", function () {\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('userId');\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"    pm.expect(jsonData).to.have.property('body');\r",
							"});\r",
							"\r",
							"pm.test(\"Validate title for patched post\", function () {\r",
							"    pm.expect(jsonData.title).to.eql(\"patched title\");\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"title\": \"patched title\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/posts/{{post_id}}"
			},
			"response": []
		},
		{
			"name": "PATCH /posts/{id}-body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"// Test for response schema\r",
							"pm.test(\"Response should match schema\", function () {\r",
							"    pm.response.to.have.jsonSchema({\r",
							"        type: \"object\",\r",
							"        properties: {\r",
							"            userId: { type: \"number\" },\r",
							"            id: { type: \"number\" },\r",
							"            title: { type: \"string\" },\r",
							"            body: { type: \"string\" }\r",
							"        },\r",
							"        required: [\"userId\", \"id\", \"title\", \"body\"]\r",
							"    });\r",
							"});\r",
							"// Test for response status\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Test for Content-Type header\r",
							"pm.test(\"Content-Type is present and has a specific value\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Patched post response is not empty\", function () {\r",
							"    pm.expect(jsonData).to.be.an('object'); \r",
							"    pm.expect(jsonData).to.have.all.keys('userId', 'id', 'title', 'body');\r",
							"});\r",
							"\r",
							"pm.test(\"Post has required fields\", function () {\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('userId');\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"    pm.expect(jsonData).to.have.property('body');\r",
							"});\r",
							"\r",
							"pm.test(\"Validate body for patched post\", function () {\r",
							"    pm.expect(jsonData.body).to.eql(\"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\");\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"title\": \"patched title\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/posts/{{post_id}}"
			},
			"response": []
		},
		{
			"name": "PATCH /posts/{id}-id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"// Test for response schema\r",
							"pm.test(\"Response should match schema\", function () {\r",
							"    pm.response.to.have.jsonSchema({\r",
							"        type: \"object\",\r",
							"        properties: {\r",
							"            userId: { type: \"number\" },\r",
							"            id: { type: \"number\" },\r",
							"            title: { type: \"string\" },\r",
							"            body: { type: \"string\" }\r",
							"        },\r",
							"        required: [\"userId\", \"id\", \"title\", \"body\"]\r",
							"    });\r",
							"});\r",
							"// Test for response status\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Test for Content-Type header\r",
							"pm.test(\"Content-Type is present and has a specific value\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Patched post response is not empty\", function () {\r",
							"    pm.expect(jsonData).to.be.an('object'); \r",
							"    pm.expect(jsonData).to.have.all.keys('userId', 'id', 'title', 'body');\r",
							"});\r",
							"\r",
							"pm.test(\"Post has required fields\", function () {\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('userId');\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"    pm.expect(jsonData).to.have.property('body');\r",
							"});\r",
							"\r",
							"pm.test(\"Validate id for patched post\", function () {\r",
							"    pm.expect(jsonData.id).to.eql(1);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"title\": \"patched title\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/posts/{{post_id}}"
			},
			"response": []
		},
		{
			"name": "PATCH /posts/{id}-userId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();\r",
							"// Test for response schema\r",
							"pm.test(\"Response should match schema\", function () {\r",
							"    pm.response.to.have.jsonSchema({\r",
							"        type: \"object\",\r",
							"        properties: {\r",
							"            userId: { type: \"number\" },\r",
							"            id: { type: \"number\" },\r",
							"            title: { type: \"string\" },\r",
							"            body: { type: \"string\" }\r",
							"        },\r",
							"        required: [\"userId\", \"id\", \"title\", \"body\"]\r",
							"    });\r",
							"});\r",
							"// Test for response status\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Test for Content-Type header\r",
							"pm.test(\"Content-Type is present and has a specific value\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");\r",
							"});\r",
							"\r",
							"pm.test(\"Patched post response is not empty\", function () {\r",
							"    pm.expect(jsonData).to.be.an('object'); \r",
							"    pm.expect(jsonData).to.have.all.keys('userId', 'id', 'title', 'body');\r",
							"});\r",
							"\r",
							"pm.test(\"Post has required fields\", function () {\r",
							"    pm.expect(jsonData).to.have.property('id');\r",
							"    pm.expect(jsonData).to.have.property('userId');\r",
							"    pm.expect(jsonData).to.have.property('title');\r",
							"    pm.expect(jsonData).to.have.property('body');\r",
							"});\r",
							"\r",
							"pm.test(\"Validate userId for patched post\", function () {\r",
							"    pm.expect(jsonData.userId).to.eql(1);\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"title\": \"patched title\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{base_url}}/posts/{{post_id}}"
			},
			"response": []
		},
		{
			"name": "DELETE /posts/{id}",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has a valid schema\", function () {\r",
							"    pm.response.to.have.jsonSchema({\r",
							"        type: \"object\",\r",
							"        additionalProperties: false // response has no additional properties\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type is present and has the correct value\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json; charset=utf-8\");\r",
							"}); \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response body should be an empty JSON object\", function () {\r",
							"    pm.expect(pm.response.json()).to.eql({});\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": "{{base_url}}/posts/{{post_id}}"
			},
			"response": []
		}
	]
}